import { Injectable, Logger } from '@nestjs/common';
import { Cron } from '@nestjs/schedule';
import { ClientInactivityService } from './client-inactivity.service';

@Injectable()
export class NotificationScheduler {
  private readonly logger = new Logger(NotificationScheduler.name);

  constructor(
    private readonly clientInactivityService: ClientInactivityService,
  ) {}

  // Executar todo dia √†s 6:00 da manh√£
  @Cron('0 6 * * *')
  async checkInactiveClients() {
    this.logger.log('üîç Iniciando verifica√ß√£o de clientes inativos √†s 6:00 da manh√£...');
    try {
      await this.clientInactivityService.generateInactivityNotifications();
      this.logger.log('‚úÖ Verifica√ß√£o de clientes inativos conclu√≠da com sucesso!');
    } catch (error) {
      this.logger.error('‚ùå Erro ao verificar clientes inativos:', error);
    }
  }

  // Executar a cada 6 horas para verifica√ß√£o adicional
  @Cron('0 */6 * * *')
  async checkInactiveClientsFrequent() {
    this.logger.log('üîÑ Verifica√ß√£o frequente de clientes inativos...');
    try {
      await this.clientInactivityService.generateInactivityNotifications();
      this.logger.log('‚úÖ Verifica√ß√£o frequente conclu√≠da!');
    } catch (error) {
      this.logger.error('‚ùå Erro na verifica√ß√£o frequente:', error);
    }
  }

  // Executar todo domingo √† meia-noite para limpeza
  @Cron('0 0 * * 0')
  cleanupOldNotifications() {
    this.logger.log('üßπ Iniciando limpeza de notifica√ß√µes antigas...');
    try {
      // Aqui voc√™ pode implementar l√≥gica para limpar notifica√ß√µes antigas
      // Por exemplo, deletar notifica√ß√µes com mais de 30 dias
      this.logger.log('‚úÖ Limpeza de notifica√ß√µes antigas conclu√≠da!');
    } catch (error) {
      this.logger.error('‚ùå Erro na limpeza de notifica√ß√µes:', error);
    }
  }
}